{"version":3,"sources":["components/Navbar.js","components/Home.js","components/Bio.js","components/Contact.js","components/Events.js","components/Media.js","components/Page404.js","App.js","serviceWorker.js","index.js"],"names":["NavbarStyle","styled","div","NavLogo","Button","button","props","showNav","Links","navItems","path","name","Navbar","useState","setShowNav","map","item","index","key","to","onClick","Home","src","alt","Bio","Contact","Events","Media","Page404","AppStyle","App","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mrCAIA,IAAMA,EAAcC,IAAOC,IAAV,KAOXC,EAAUF,IAAOC,IAAV,KAMPE,EAASH,IAAOI,OAAV,KAGG,SAAAC,GAAK,OAAIA,EAAMC,QAAU,OAAS,WAU3CC,EAAQP,IAAOC,IAAV,KAKI,SAAAI,GAAK,OAAIA,EAAMC,QAAU,OAAS,UAQ3CE,EAAW,CACf,CAAEC,KAAM,IAAKC,KAAM,QACnB,CAAED,KAAM,OAAQC,KAAM,OACtB,CAAED,KAAM,SAAUC,KAAM,SACxB,CAAED,KAAM,UAAWC,KAAM,UACzB,CAAED,KAAM,WAAYC,KAAM,YAGb,SAASC,IAAU,IAAD,EACDC,oBAAS,GADR,mBACxBN,EADwB,KACfO,EADe,KAO/B,OACE,oCACE,kBAACd,EAAD,KACE,kBAACG,EAAD,uBACA,kBAACK,EAAD,CAAOD,QAASA,GACbE,EAASM,KAAI,SAACC,EAAMC,GACnB,OACE,kBAAC,IAAD,CAAMC,IAAKD,EAAOE,GAAIH,EAAKN,KAAMU,QAAS,kBAAMN,GAAW,KACxDE,EAAKL,WAMhB,kBAACP,EAAD,CAAQG,QAASA,EAASa,QAlBV,WAClBN,GAAYP,KAiBV,SCtES,SAASc,IACpB,OACI,oCACI,8CACA,gDACA,yBAAKC,IAAI,oBAAoBC,IAAI,MCL9B,SAASC,IACpB,OACI,mCCFO,SAASC,IACpB,OACI,uCCFO,SAASC,IACpB,OACI,sCCDO,SAASC,IACpB,OACI,qCCHO,SAASC,IACpB,OACI,8C,gNCOR,IAAMC,EAAW5B,IAAOC,IAAV,KAyBC4B,MAhBf,WACE,OACE,kBAACD,EAAD,KACE,kBAACjB,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmB,OAAK,EAACC,UAAWR,EAAKd,KAAK,SAClC,kBAAC,IAAD,CAAOqB,OAAK,EAACC,UAAWP,EAASf,KAAK,aACtC,kBAAC,IAAD,CAAOqB,OAAK,EAACC,UAAWN,EAAQhB,KAAK,YACrC,kBAAC,IAAD,CAAOqB,OAAK,EAACC,UAAWL,EAAOjB,KAAK,WACpC,kBAAC,IAAD,CAAOqB,OAAK,EAACC,UAAWX,EAAMX,KAAK,MACnC,kBAAC,IAAD,CAAOsB,UAAWJ,OClBNK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e02a976c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\n\nconst NavbarStyle = styled.div`\n  display: flex;\n  font-size: 1.5em;\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\nconst NavLogo = styled.div`\n  color: palevioletred;\n  background-color: white;\n  flex: 1 1 0;\n\n`;\nconst Button = styled.button`\n  display: none;\n  @media (max-width: 768px) {\n    display: ${props => props.showNav ? 'none' : 'block'};\n    color: palevioletred;\n    background-color: white;\n    margin: 1em auto;\n    font-size: 1em;\n    padding: 0.25em 1em;\n    border: 2px solid palevioletred;\n    border-radius: 3px;\n  }\n`;\nconst Links = styled.div`\n  display:flex;\n  justify-content: space-around;\n  flex: 2 1 0;\n  @media (max-width: 768px) {\n    display: ${props => props.showNav ? 'flex' : 'none'};\n    flex-direction: column;\n  }\n  a{\n    text-decoration:none;\n    color: green;\n  }\n`\nconst navItems = [\n  { path: \"/\", name: 'Home' },\n  { path: \"/bio\", name: 'Bio' },\n  { path: \"/media\", name: 'Media' },\n  { path: \"/events\", name: 'Events' },\n  { path: \"/contact\", name: 'Contact' },\n]\n\nexport default function Navbar() {\n  const [showNav, setShowNav] = useState(false);\n\n  const handleClick = () => {\n    setShowNav(!showNav);\n  };\n\n  return (\n    <>\n      <NavbarStyle>\n        <NavLogo>Henrik Zenkert</NavLogo>\n        <Links showNav={showNav}>\n          {navItems.map((item, index) => {\n            return (\n              <Link key={index} to={item.path} onClick={() => setShowNav(false)}>\n                {item.name}\n              </Link>\n            )\n          })}\n        </Links>\n      </NavbarStyle>\n      <Button showNav={showNav} onClick={handleClick}>Menu</Button>\n    </>\n  );\n}\n","import React from 'react'\n\nexport default function Home() {\n    return (\n        <>\n            <h1>Henrik Zenkert</h1>\n            <h2>Opera and liedaa</h2>\n            <img src=\"./cropped_pic.jpg\" alt=\"\" />\n        </>\n    )\n}","import React from 'react'\n\nexport default function Bio(){\n    return(\n        <h1>Bio</h1>\n    )\n}","import React from 'react'\n\nexport default function Contact(){\n    return(\n        <h1>Contact</h1>\n    )\n}","import React from 'react'\n\nexport default function Events(){\n    return(\n        <h1>Events</h1>\n    )\n}","\nimport React from 'react'\n\nexport default function Media(){\n    return(\n        <h1>Media</h1>\n    )\n}","import React from 'react'\n\nexport default function Page404(){\n    return(\n        <h1>Page not found</h1>\n    )\n}","import React from 'react';\nimport Navbar from './components/Navbar'\nimport Home from './components/Home'\nimport Bio from './components/Bio'\nimport Contact from './components/Contact'\nimport Events from './components/Events'\nimport Media from './components/Media'\nimport Page404 from './components/Page404'\nimport { Switch, Route } from 'react-router-dom';\nimport styled from 'styled-components'\nimport './App.css';\nconst AppStyle = styled.div`\n  text-align: center;\n  margin: auto;\n  max-width: 80vw;\n  @media (max-width: 1440px) {\n    max-width: 100vw;\n  }\n`\n\nfunction App() {\n  return (\n    <AppStyle>\n      <Navbar />\n      <Switch>\n        <Route exact component={Bio} path=\"/bio\" />\n        <Route exact component={Contact} path=\"/contact\" />\n        <Route exact component={Events} path=\"/events\" />\n        <Route exact component={Media} path=\"/media\" />\n        <Route exact component={Home} path=\"/\" />\n        <Route component={Page404} />\n      </Switch>\n    </AppStyle>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}